# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fau_timer', [dirname(__file__)])
        except ImportError:
            import _fau_timer
            return _fau_timer
        if fp is not None:
            try:
                _mod = imp.load_module('_fau_timer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fau_timer = swig_import_helper()
    del swig_import_helper
else:
    import _fau_timer
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def error(msg):
    return _fau_timer.error(msg)
error = _fau_timer.error

def get_ticks():
    return _fau_timer.get_ticks()
get_ticks = _fau_timer.get_ticks

def get_aprox_cpu_speed():
    return _fau_timer.get_aprox_cpu_speed()
get_aprox_cpu_speed = _fau_timer.get_aprox_cpu_speed

def init():
    return _fau_timer.init()
init = _fau_timer.init

def send_request(ip, port_no, request):
    return _fau_timer.send_request(ip, port_no, request)
send_request = _fau_timer.send_request

def convert_ticks_to_nanosecs(no_ticks, speed):
    return _fau_timer.convert_ticks_to_nanosecs(no_ticks, speed)
convert_ticks_to_nanosecs = _fau_timer.convert_ticks_to_nanosecs

def calculate_time():
    return _fau_timer.calculate_time()
calculate_time = _fau_timer.calculate_time

def get_response():
    return _fau_timer.get_response()
get_response = _fau_timer.get_response

def get_cpu_ticks():
    return _fau_timer.get_cpu_ticks()
get_cpu_ticks = _fau_timer.get_cpu_ticks

def get_time():
    return _fau_timer.get_time()
get_time = _fau_timer.get_time

def get_speed():
    return _fau_timer.get_speed()
get_speed = _fau_timer.get_speed

def test():
    return _fau_timer.test()
test = _fau_timer.test

def main(argc, argv):
    return _fau_timer.main(argc, argv)
main = _fau_timer.main
# This file is compatible with both classic and new-style classes.

cvar = _fau_timer.cvar

